#!/bin/bash
set -ex # Exit immediately if a command exits with a non-zero status and print commands.

echo "--- Starting postBuild script ---"

# --- Install SQDMetal ---
echo "Cloning and installing SQDMetal..."
# SQDMETAL_DIR="/opt/SQDMetal" # Using /opt as a standard location for manually installed software
# git clone https://github.com/sqdlab/SQDMetal.git ${SQDMETAL_DIR}

# Pip install from the Conda environment's pip
# The current working directory for postBuild is the root of the repository.
# Let's clone SQDMetal into a temporary directory within the build context.
SQDMETAL_TEMP_DIR=$(mktemp -d)
git clone https://github.com/sqdlab/SQDMetal.git ${SQDMETAL_TEMP_DIR}

# Use the Conda environment's pip
PIP_CMD="/srv/conda/envs/notebook/bin/pip"
${PIP_CMD} install -e ${SQDMETAL_TEMP_DIR}
# No need to keep SQDMETAL_TEMP_DIR source after install if -e linked properly or copied files.
# For editable installs, the source needs to persist. Let's install it to /opt/SQDMetal instead
# for clarity and persistence, as editable installs link to the source.

if [ -d "/opt/SQDMetal" ]; then
  rm -rf "/opt/SQDMetal"
fi
git clone https://github.com/sqdlab/SQDMetal.git /opt/SQDMetal
${PIP_CMD} install -e /opt/SQDMetal
echo "SQDMetal installation complete."


# --- Install Palace ---
echo "Cloning, building, and installing Palace..."
# PALACE_DIR="/opt/palace_src" # Source directory
PALACE_BUILD_DIR="/tmp/palace_build" # Temporary build directory
PALACE_INSTALL_PREFIX="/srv/conda/envs/notebook" # Install into Conda env

# Define Palace version (tag or commit hash) for stability
PALACE_VERSION="v0.18.0" # Example: Use a specific release tag from https://github.com/awslabs/palace
# Or use a specific commit: PALACE_VERSION="abcdef1234567890abcdef1234567890abcdef12"

PALACE_SRC_TEMP_DIR=$(mktemp -d)
git clone https://github.com/awslabs/palace.git --branch ${PALACE_VERSION} --depth 1 ${PALACE_SRC_TEMP_DIR}
cd ${PALACE_SRC_TEMP_DIR}

mkdir -p ${PALACE_BUILD_DIR} # Create build directory
cd ${PALACE_BUILD_DIR}

# Configure Palace with CMake
# -DCMAKE_INSTALL_PREFIX ensures it installs into the Conda environment, making it findable.
# Disable GPU support and other optional features not needed for MyBinder to speed up build.
cmake ${PALACE_SRC_TEMP_DIR} \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=${PALACE_INSTALL_PREFIX} \
    -DPALACE_WITH_SLEPC=OFF \
    -DPALACE_WITH_ARPACK=OFF \
    -DPALACE_WITH_GPU=OFF \
    -DPALACE_WITH_GSLIB=OFF # Example: check Palace docs for more flags

# Compile Palace (use number of available processors)
make -j$(nproc)

# Install Palace
make install
echo "Palace installation complete."

# Verify Palace installation
echo "Checking Palace executable..."
if [ -f "${PALACE_INSTALL_PREFIX}/bin/palace" ]; then
    ls -l "${PALACE_INSTALL_PREFIX}/bin/palace"
    "${PALACE_INSTALL_PREFIX}/bin/palace" --version || echo "Palace --version command not available or failed, but executable exists."
else
    echo "ERROR: Palace executable not found at ${PALACE_INSTALL_PREFIX}/bin/palace"
    exit 1
fi

# Clean up Palace source and build directories to save image space
# rm -rf ${PALACE_SRC_TEMP_DIR} # Source code
# rm -rf ${PALACE_BUILD_DIR}  # Build directory

echo "--- postBuild script finished successfully ---"
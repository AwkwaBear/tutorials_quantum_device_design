#!/bin/bash
set -ex # Exit immediately if a command exits with a non-zero status and print commands.

echo "--- Starting postBuild script (Revised for User Directory and Simplicity) ---"

echo "Starting Palace build process..."

# Define installation prefix for Palace
PALACE_INSTALL_PREFIX=/opt/palace
export PALACE_SRC_DIR=/home/jovyan/palace_src
export PALACE_BUILD_DIR=/home/jovyan/palace_build

# Create directories
mkdir -p $PALACE_SRC_DIR
mkdir -p $PALACE_BUILD_DIR
mkdir -p $PALACE_INSTALL_PREFIX

# Clone the Palace repository
echo "Cloning Palace repository..."
git clone https://github.com/awslabs/palace.git $PALACE_SRC_DIR

# Configure Palace using CMake
echo "Configuring Palace with CMake..."
cd $PALACE_BUILD_DIR

# Basic CMake configuration.
# You might need to add more -D options based on Palace documentation
# or if you want to disable certain features (e.g., GPU support, specific solvers)
# to speed up the build or reduce dependencies.
# For MyBinder, we definitely want to disable GPU support.
# We also want to ensure it uses the system MPI.
cmake -DCMAKE_INSTALL_PREFIX=$PALACE_INSTALL_PREFIX \
      -DCMAKE_BUILD_TYPE=Release \
      -DPALACE_WITH_MPI=ON \
      -DPALACE_WITH_OPENMP=ON \ # Enable OpenMP if desired, MyBinder has multiple cores
      -DPALACE_WITH_SUPERLU=ON \ # Example: Enable SuperLU (check if it builds its own or needs libsuperlu-dev)
      -DPALACE_WITH_STRUMPACK=OFF \ # STRUMPACK can be heavy, disable if not needed
      -DPALACE_WITH_SLEPC=ON \    # SLEPc is often used for eigenproblems
      -DPALACE_WITH_ARPACK=OFF \   # Disable if SLEPc is preferred or to reduce build time
      -DPALACE_WITH_GPU=OFF \     # Crucial: Disable GPU support
      -DPALACE_BUILD_EXAMPLES=OFF \ # Optional: Disable building examples to save time
      -DPALACE_BUILD_TESTS=OFF \    # Optional: Disable building tests to save time
      $PALACE_SRC_DIR

# Build Palace
# Use number of available processors, MyBinder usually provides at least 2
NUM_PROCS=$(nproc --all)
echo "Building Palace using $NUM_PROCS processors..."
make -j$NUM_PROCS

# Install Palace
echo "Installing Palace..."
make install

# Add Palace to PATH for the Jupyter environment
# This ensures 'palace' command is available in terminals and notebooks
# The specific file to modify depends on the shell and how Jupyter starts it.
# For bash, .bashrc or .profile. For repo2docker, it often sources scripts in /etc/profile.d/
# A common approach for MyBinder is to create a script in /etc/profile.d/
echo "Configuring environment for Palace..."
PROFILE_SCRIPT_PATH="/etc/profile.d/palace_env.sh"
echo "#!/bin/bash" > $PROFILE_SCRIPT_PATH
echo "export PATH=$PALACE_INSTALL_PREFIX/bin:\$PATH" >> $PROFILE_SCRIPT_PATH
echo "export LD_LIBRARY_PATH=$PALACE_INSTALL_PREFIX/lib:\$LD_LIBRARY_PATH" >> $PROFILE_SCRIPT_PATH # If Palace installs .so files to lib
chmod +x $PROFILE_SCRIPT_PATH

# Clean up build directory to save space (optional, but good practice for MyBinder)
echo "Cleaning up Palace build directory..."
cd /home/jovyan/
rm -rf $PALACE_BUILD_DIR
# rm -rf $PALACE_SRC_DIR # Keep source if you want to inspect it, remove to save space

echo "Palace installation complete."
echo "Palace executable should be available at $PALACE_INSTALL_PREFIX/bin/palace"
echo "Make sure to source $PROFILE_SCRIPT_PATH or restart your shell/kernel."





# Create a directory in the user's home for our source code.
# '~' reliably refers to the user's home directory (e.g., /home/jovyan).
# This directory will hold the source code for SQDMetal and Palace.
# For editable installs (-e), the source code must persist.
USER_GIT_SRC_DIR="~/cloned_libs"
mkdir -p "${USER_GIT_SRC_DIR}"

# --- Install SQDMetal ---
echo "Cloning and installing SQDMetal in editable mode..."
SQDMETAL_CODE_DIR="${USER_GIT_SRC_DIR}/SQDMetal"

# Ensure a fresh clone if the directory somehow exists (unlikely in clean MyBinder builds)
if [ -d "${SQDMETAL_CODE_DIR}" ]; then
  echo "Removing existing SQDMetal directory: ${SQDMETAL_CODE_DIR}"
  rm -rf "${SQDMETAL_CODE_DIR}"
fi
git clone https://github.com/sqdlab/SQDMetal.git "${SQDMETAL_CODE_DIR}"

# Install SQDMetal in editable mode using 'pip' from the active Conda environment.
# The 'pip' command will correctly point to the Conda environment's pip.
pip install -e "${SQDMETAL_CODE_DIR}"
echo "SQDMetal installation complete."




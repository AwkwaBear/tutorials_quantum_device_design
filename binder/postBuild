#!/bin/bash
set -ex # Exit immediately if a command exits with a non-zero status and print commands.

echo "--- Starting postBuild script (Revised for User Directory and Simplicity) ---"
echo "Starting Palace build process..."

# Define installation prefix for Palace within the user's home directory
# CHANGED: Installation prefix is now within /home/jovyan/
export PALACE_INSTALL_PREFIX=/home/jovyan/opt/palace 
export PALACE_SRC_DIR=/home/jovyan/palace_src
export PALACE_BUILD_DIR=/home/jovyan/palace_build

# Create directories
# These directories are within /home/jovyan, so no permission issues here.
mkdir -p $PALACE_SRC_DIR
mkdir -p $PALACE_BUILD_DIR
mkdir -p $PALACE_INSTALL_PREFIX # This will now be /home/jovyan/opt/palace

# Clone the Palace repository
echo "Cloning Palace repository..."
git clone https://github.com/awslabs/palace.git $PALACE_SRC_DIR

# Configure Palace using CMake
echo "Configuring Palace with CMake..."
cd $PALACE_BUILD_DIR

# Basic CMake configuration.
# Using the updated PALACE_INSTALL_PREFIX
cmake -DCMAKE_INSTALL_PREFIX=$PALACE_INSTALL_PREFIX \
      -DCMAKE_BUILD_TYPE=Release \
      -DPALACE_WITH_MPI=ON \
      -DPALACE_WITH_OPENMP=ON \ 
      -DPALACE_WITH_SUPERLU=ON \ 
      -DPALACE_WITH_STRUMPACK=OFF \ 
      -DPALACE_WITH_SLEPC=ON \    
      -DPALACE_WITH_ARPACK=OFF \   
      -DPALACE_WITH_GPU=OFF \     
      -DPALACE_BUILD_EXAMPLES=OFF \ 
      -DPALACE_BUILD_TESTS=OFF \    
      $PALACE_SRC_DIR

# Build Palace
# Use number of available processors, MyBinder usually provides at least 2
NUM_PROCS=$(nproc --all)
echo "Building Palace using $NUM_PROCS processors..."
make -j$NUM_PROCS

# Install Palace
echo "Installing Palace..."
make install

# Add Palace to PATH for the Jupyter environment
# This ensures 'palace' command is available in terminals and notebooks
echo "Configuring environment for Palace..."
PROFILE_SCRIPT_PATH="/home/jovyan/.bashrc" # Modifying user's .bashrc is safer and more standard

# Append to .bashrc if not already there to avoid duplicate entries
# This also ensures it's sourced automatically for new bash shells.
# For Jupyter notebooks and terminals started via Jupyter, this should also work.
# If Jupyter uses a different shell or doesn't source .bashrc,
# an alternative is to create a script in $NB_PYTHON_PREFIX/etc/conda/activate.d/
# or $NB_PYTHON_PREFIX/etc/conda/deactivate.d/ for conda environments.
# However, modifying .bashrc is a good first step.

echo "" >> $PROFILE_SCRIPT_PATH
echo "# Palace Environment Configuration" >> $PROFILE_SCRIPT_PATH
echo "export PATH=$PALACE_INSTALL_PREFIX/bin:\$PATH" >> $PROFILE_SCRIPT_PATH
echo "export LD_LIBRARY_PATH=$PALACE_INSTALL_PREFIX/lib:\$LD_LIBRARY_PATH" >> $PROFILE_SCRIPT_PATH 
echo "export LD_LIBRARY_PATH=$PALACE_INSTALL_PREFIX/lib64:\$LD_LIBRARY_PATH" >> $PROFILE_SCRIPT_PATH # Some systems use lib64

# Clean up build directory to save space (optional, but good practice for MyBinder)
echo "Cleaning up Palace build directory..."
cd /home/jovyan/
rm -rf $PALACE_BUILD_DIR
# rm -rf $PALACE_SRC_DIR # Keep source if you want to inspect it, remove to save space

echo "Palace installation complete."
echo "Palace executable should be available at $PALACE_INSTALL_PREFIX/bin/palace"
echo "You might need to open a new terminal or restart the Jupyter kernel for PATH changes to take effect."

# --- Install SQDMetal ---
echo "Cloning and installing SQDMetal in editable mode..."
SQDMETAL_CODE_DIR="${USER_GIT_SRC_DIR}/SQDMetal"

# Ensure a fresh clone if the directory somehow exists (unlikely in clean MyBinder builds)
if [ -d "${SQDMETAL_CODE_DIR}" ]; then
  echo "Removing existing SQDMetal directory: ${SQDMETAL_CODE_DIR}"
  rm -rf "${SQDMETAL_CODE_DIR}"
fi
git clone https://github.com/sqdlab/SQDMetal.git "${SQDMETAL_CODE_DIR}"

# Install SQDMetal in editable mode using 'pip' from the active Conda environment.
# The 'pip' command will correctly point to the Conda environment's pip.
pip install -e "${SQDMETAL_CODE_DIR}"
echo "SQDMetal installation complete."



